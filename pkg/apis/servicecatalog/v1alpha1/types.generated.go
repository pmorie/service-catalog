/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg4_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_v1.ObjectMeta
		var v1 pkg1_v1.TypeMeta
		var v2 pkg4_runtime.RawExtension
		var v3 pkg3_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Broker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Broker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Broker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BrokerSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BrokerStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Broker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BrokerSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BrokerStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [4]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Kind != ""
			yyq33[1] = x.APIVersion != ""
			yyq33[2] = true
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(4)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.ListMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.ListMeta
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym48 := z.DecBinary()
	_ = yym48
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct49 := r.ContainerType()
		if yyct49 == codecSelferValueTypeMap1234 {
			yyl49 := r.ReadMapStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl49, d)
			}
		} else if yyct49 == codecSelferValueTypeArray1234 {
			yyl49 := r.ReadArrayStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl49, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys50Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys50Slc
	var yyhl50 bool = l >= 0
	for yyj50 := 0; ; yyj50++ {
		if yyhl50 {
			if yyj50 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys50Slc = r.DecodeBytes(yys50Slc, true, true)
		yys50 := string(yys50Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys50 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv53 := &x.ListMeta
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv55 := &x.Items
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					h.decSliceBroker((*[]Broker)(yyv55), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys50)
		} // end switch yys50
	} // end for yyj50
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj57 int
	var yyb57 bool
	var yyhl57 bool = l >= 0
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv60 := &x.ListMeta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv62 := &x.Items
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSliceBroker((*[]Broker)(yyv62), d)
		}
	}
	for {
		yyj57++
		if yyhl57 {
			yyb57 = yyj57 > l
		} else {
			yyb57 = r.CheckBreak()
		}
		if yyb57 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj57-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyq65 [4]bool
			_, _, _ = yysep65, yyq65, yy2arr65
			const yyr65 bool = false
			var yynn65 int
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(4)
			} else {
				yynn65 = 4
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
				yynn65 = 0
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthUsername))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("authUsername"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthUsername))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthPassword))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("authPassword"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym74 := z.EncBinary()
				_ = yym74
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthPassword))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym77 := z.EncBinary()
				_ = yym77
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = string(r.DecodeString())
			}
		case "authUsername":
			if r.TryDecodeAsNil() {
				x.AuthUsername = ""
			} else {
				x.AuthUsername = string(r.DecodeString())
			}
		case "authPassword":
			if r.TryDecodeAsNil() {
				x.AuthPassword = ""
			} else {
				x.AuthPassword = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj85 int
	var yyb85 bool
	var yyhl85 bool = l >= 0
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AuthUsername = ""
	} else {
		x.AuthUsername = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AuthPassword = ""
	} else {
		x.AuthPassword = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj85++
		if yyhl85 {
			yyb85 = yyj85 > l
		} else {
			yyb85 = r.CheckBreak()
		}
		if yyb85 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj85-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym90 := z.EncBinary()
		_ = yym90
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep91 := !z.EncBinary()
			yy2arr91 := z.EncBasicHandle().StructToArray
			var yyq91 [1]bool
			_, _, _ = yysep91, yyq91, yy2arr91
			const yyr91 bool = false
			var yynn91 int
			if yyr91 || yy2arr91 {
				r.EncodeArrayStart(1)
			} else {
				yynn91 = 1
				for _, b := range yyq91 {
					if b {
						yynn91++
					}
				}
				r.EncodeMapStart(yynn91)
				yynn91 = 0
			}
			if yyr91 || yy2arr91 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			}
			if yyr91 || yy2arr91 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv98 := &x.Conditions
				yym99 := z.DecBinary()
				_ = yym99
				if false {
				} else {
					h.decSliceBrokerCondition((*[]BrokerCondition)(yyv98), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj100 int
	var yyb100 bool
	var yyhl100 bool = l >= 0
	yyj100++
	if yyhl100 {
		yyb100 = yyj100 > l
	} else {
		yyb100 = r.CheckBreak()
	}
	if yyb100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv101 := &x.Conditions
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			h.decSliceBrokerCondition((*[]BrokerCondition)(yyv101), d)
		}
	}
	for {
		yyj100++
		if yyhl100 {
			yyb100 = yyj100 > l
		} else {
			yyb100 = r.CheckBreak()
		}
		if yyb100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym103 := z.EncBinary()
		_ = yym103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep104 := !z.EncBinary()
			yy2arr104 := z.EncBasicHandle().StructToArray
			var yyq104 [4]bool
			_, _, _ = yysep104, yyq104, yy2arr104
			const yyr104 bool = false
			var yynn104 int
			if yyr104 || yy2arr104 {
				r.EncodeArrayStart(4)
			} else {
				yynn104 = 4
				for _, b := range yyq104 {
					if b {
						yynn104++
					}
				}
				r.EncodeMapStart(yynn104)
				yynn104 = 0
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym108 := z.EncBinary()
				_ = yym108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym109 := z.EncBinary()
				_ = yym109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym113 := z.DecBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct114 := r.ContainerType()
		if yyct114 == codecSelferValueTypeMap1234 {
			yyl114 := r.ReadMapStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl114, d)
			}
		} else if yyct114 == codecSelferValueTypeArray1234 {
			yyl114 := r.ReadArrayStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys115Slc
	var yyhl115 bool = l >= 0
	for yyj115 := 0; ; yyj115++ {
		if yyhl115 {
			if yyj115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys115Slc = r.DecodeBytes(yys115Slc, true, true)
		yys115 := string(yys115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys115 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BrokerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys115)
		} // end switch yys115
	} // end for yyj115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj120 int
	var yyb120 bool
	var yyhl120 bool = l >= 0
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BrokerConditionType(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj120++
		if yyhl120 {
			yyb120 = yyj120 > l
		} else {
			yyb120 = r.CheckBreak()
		}
		if yyb120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BrokerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym125 := z.EncBinary()
	_ = yym125
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BrokerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym126 := z.DecBinary()
	_ = yym126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym127 := z.EncBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym129 := z.EncBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep130 := !z.EncBinary()
			yy2arr130 := z.EncBasicHandle().StructToArray
			var yyq130 [4]bool
			_, _, _ = yysep130, yyq130, yy2arr130
			const yyr130 bool = false
			yyq130[0] = x.Kind != ""
			yyq130[1] = x.APIVersion != ""
			yyq130[2] = true
			var yynn130 int
			if yyr130 || yy2arr130 {
				r.EncodeArrayStart(4)
			} else {
				yynn130 = 1
				for _, b := range yyq130 {
					if b {
						yynn130++
					}
				}
				r.EncodeMapStart(yynn130)
				yynn130 = 0
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[0] {
					yym132 := z.EncBinary()
					_ = yym132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq130[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[1] {
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq130[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[2] {
					yy138 := &x.ListMeta
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else if z.HasExtensions() && z.EncExt(yy138) {
					} else {
						z.EncFallback(yy138)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq130[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy140 := &x.ListMeta
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else if z.HasExtensions() && z.EncExt(yy140) {
					} else {
						z.EncFallback(yy140)
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym143 := z.EncBinary()
					_ = yym143
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym145 := z.DecBinary()
	_ = yym145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct146 := r.ContainerType()
		if yyct146 == codecSelferValueTypeMap1234 {
			yyl146 := r.ReadMapStart()
			if yyl146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl146, d)
			}
		} else if yyct146 == codecSelferValueTypeArray1234 {
			yyl146 := r.ReadArrayStart()
			if yyl146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys147Slc
	var yyhl147 bool = l >= 0
	for yyj147 := 0; ; yyj147++ {
		if yyhl147 {
			if yyj147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys147Slc = r.DecodeBytes(yys147Slc, true, true)
		yys147 := string(yys147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys147 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv150 := &x.ListMeta
				yym151 := z.DecBinary()
				_ = yym151
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv150) {
				} else {
					z.DecFallback(yyv150, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv152 := &x.Items
				yym153 := z.DecBinary()
				_ = yym153
				if false {
				} else {
					h.decSliceServiceClass((*[]ServiceClass)(yyv152), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys147)
		} // end switch yys147
	} // end for yyj147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj154 int
	var yyb154 bool
	var yyhl154 bool = l >= 0
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv157 := &x.ListMeta
		yym158 := z.DecBinary()
		_ = yym158
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv157) {
		} else {
			z.DecFallback(yyv157, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv159 := &x.Items
		yym160 := z.DecBinary()
		_ = yym160
		if false {
		} else {
			h.decSliceServiceClass((*[]ServiceClass)(yyv159), d)
		}
	}
	for {
		yyj154++
		if yyhl154 {
			yyb154 = yyj154 > l
		} else {
			yyb154 = r.CheckBreak()
		}
		if yyb154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym161 := z.EncBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep162 := !z.EncBinary()
			yy2arr162 := z.EncBasicHandle().StructToArray
			var yyq162 [15]bool
			_, _, _ = yysep162, yyq162, yy2arr162
			const yyr162 bool = false
			yyq162[0] = x.Kind != ""
			yyq162[1] = x.APIVersion != ""
			yyq162[2] = true
			var yynn162 int
			if yyr162 || yy2arr162 {
				r.EncodeArrayStart(15)
			} else {
				yynn162 = 12
				for _, b := range yyq162 {
					if b {
						yynn162++
					}
				}
				r.EncodeMapStart(yynn162)
				yynn162 = 0
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[0] {
					yym164 := z.EncBinary()
					_ = yym164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym165 := z.EncBinary()
					_ = yym165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[1] {
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[2] {
					yy170 := &x.ObjectMeta
					yy170.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy171 := &x.ObjectMeta
					yy171.CodecEncodeSelf(e)
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym173 := z.EncBinary()
				_ = yym173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("brokerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym174 := z.EncBinary()
				_ = yym174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym176 := z.EncBinary()
				_ = yym176
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bindable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym177 := z.EncBinary()
				_ = yym177
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("plans"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym182 := z.EncBinary()
				_ = yym182
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planUpdatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym183 := z.EncBinary()
				_ = yym183
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym185 := z.EncBinary()
				_ = yym185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym186 := z.EncBinary()
				_ = yym186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBTags == nil {
					r.EncodeNil()
				} else {
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBTags == nil {
					r.EncodeNil()
				} else {
					yym189 := z.EncBinary()
					_ = yym189
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBTags, false, e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBRequires == nil {
					r.EncodeNil()
				} else {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBRequires, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbRequires"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBRequires == nil {
					r.EncodeNil()
				} else {
					yym192 := z.EncBinary()
					_ = yym192
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBRequires, false, e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym194 := z.EncBinary()
				_ = yym194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbMaxDBPerNode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym195 := z.EncBinary()
				_ = yym195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy197 := &x.OSBMetadata
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else if z.HasExtensions() && z.EncExt(yy197) {
				} else if !yym198 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy197)
				} else {
					z.EncFallback(yy197)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbMetadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy199 := &x.OSBMetadata
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else if z.HasExtensions() && z.EncExt(yy199) {
				} else if !yym200 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy199)
				} else {
					z.EncFallback(yy199)
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym202 := z.EncBinary()
				_ = yym202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardOAuth2ClientID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym205 := z.EncBinary()
				_ = yym205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardSecret"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym206 := z.EncBinary()
				_ = yym206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym208 := z.EncBinary()
				_ = yym208
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardRedirectURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym209 := z.EncBinary()
				_ = yym209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym210 := z.DecBinary()
	_ = yym210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct211 := r.ContainerType()
		if yyct211 == codecSelferValueTypeMap1234 {
			yyl211 := r.ReadMapStart()
			if yyl211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl211, d)
			}
		} else if yyct211 == codecSelferValueTypeArray1234 {
			yyl211 := r.ReadArrayStart()
			if yyl211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys212Slc
	var yyhl212 bool = l >= 0
	for yyj212 := 0; ; yyj212++ {
		if yyhl212 {
			if yyj212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys212Slc = r.DecodeBytes(yys212Slc, true, true)
		yys212 := string(yys212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys212 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv215 := &x.ObjectMeta
				yyv215.CodecDecodeSelf(d)
			}
		case "brokerName":
			if r.TryDecodeAsNil() {
				x.BrokerName = ""
			} else {
				x.BrokerName = string(r.DecodeString())
			}
		case "bindable":
			if r.TryDecodeAsNil() {
				x.Bindable = false
			} else {
				x.Bindable = bool(r.DecodeBool())
			}
		case "plans":
			if r.TryDecodeAsNil() {
				x.Plans = nil
			} else {
				yyv218 := &x.Plans
				yym219 := z.DecBinary()
				_ = yym219
				if false {
				} else {
					h.decSliceServicePlan((*[]ServicePlan)(yyv218), d)
				}
			}
		case "planUpdatable":
			if r.TryDecodeAsNil() {
				x.PlanUpdatable = false
			} else {
				x.PlanUpdatable = bool(r.DecodeBool())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbTags":
			if r.TryDecodeAsNil() {
				x.OSBTags = nil
			} else {
				yyv222 := &x.OSBTags
				yym223 := z.DecBinary()
				_ = yym223
				if false {
				} else {
					z.F.DecSliceStringX(yyv222, false, d)
				}
			}
		case "osbRequires":
			if r.TryDecodeAsNil() {
				x.OSBRequires = nil
			} else {
				yyv224 := &x.OSBRequires
				yym225 := z.DecBinary()
				_ = yym225
				if false {
				} else {
					z.F.DecSliceStringX(yyv224, false, d)
				}
			}
		case "osbMaxDBPerNode":
			if r.TryDecodeAsNil() {
				x.OSBMaxDBPerNode = ""
			} else {
				x.OSBMaxDBPerNode = string(r.DecodeString())
			}
		case "osbMetadata":
			if r.TryDecodeAsNil() {
				x.OSBMetadata = pkg4_runtime.RawExtension{}
			} else {
				yyv227 := &x.OSBMetadata
				yym228 := z.DecBinary()
				_ = yym228
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv227) {
				} else if !yym228 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv227)
				} else {
					z.DecFallback(yyv227, false)
				}
			}
		case "osbDashboardOAuth2ClientID":
			if r.TryDecodeAsNil() {
				x.OSBDashboardOAuth2ClientID = ""
			} else {
				x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
			}
		case "osbDashboardSecret":
			if r.TryDecodeAsNil() {
				x.OSBDashboardSecret = ""
			} else {
				x.OSBDashboardSecret = string(r.DecodeString())
			}
		case "osbDashboardRedirectURI":
			if r.TryDecodeAsNil() {
				x.OSBDashboardRedirectURI = ""
			} else {
				x.OSBDashboardRedirectURI = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys212)
		} // end switch yys212
	} // end for yyj212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj232 int
	var yyb232 bool
	var yyhl232 bool = l >= 0
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv235 := &x.ObjectMeta
		yyv235.CodecDecodeSelf(d)
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BrokerName = ""
	} else {
		x.BrokerName = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bindable = false
	} else {
		x.Bindable = bool(r.DecodeBool())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Plans = nil
	} else {
		yyv238 := &x.Plans
		yym239 := z.DecBinary()
		_ = yym239
		if false {
		} else {
			h.decSliceServicePlan((*[]ServicePlan)(yyv238), d)
		}
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanUpdatable = false
	} else {
		x.PlanUpdatable = bool(r.DecodeBool())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBTags = nil
	} else {
		yyv242 := &x.OSBTags
		yym243 := z.DecBinary()
		_ = yym243
		if false {
		} else {
			z.F.DecSliceStringX(yyv242, false, d)
		}
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBRequires = nil
	} else {
		yyv244 := &x.OSBRequires
		yym245 := z.DecBinary()
		_ = yym245
		if false {
		} else {
			z.F.DecSliceStringX(yyv244, false, d)
		}
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBMaxDBPerNode = ""
	} else {
		x.OSBMaxDBPerNode = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBMetadata = pkg4_runtime.RawExtension{}
	} else {
		yyv247 := &x.OSBMetadata
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv247) {
		} else if !yym248 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv247)
		} else {
			z.DecFallback(yyv247, false)
		}
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardOAuth2ClientID = ""
	} else {
		x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardSecret = ""
	} else {
		x.OSBDashboardSecret = string(r.DecodeString())
	}
	yyj232++
	if yyhl232 {
		yyb232 = yyj232 > l
	} else {
		yyb232 = r.CheckBreak()
	}
	if yyb232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardRedirectURI = ""
	} else {
		x.OSBDashboardRedirectURI = string(r.DecodeString())
	}
	for {
		yyj232++
		if yyhl232 {
			yyb232 = yyj232 > l
		} else {
			yyb232 = r.CheckBreak()
		}
		if yyb232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePlan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym252 := z.EncBinary()
		_ = yym252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep253 := !z.EncBinary()
			yy2arr253 := z.EncBasicHandle().StructToArray
			var yyq253 [4]bool
			_, _, _ = yysep253, yyq253, yy2arr253
			const yyr253 bool = false
			var yynn253 int
			if yyr253 || yy2arr253 {
				r.EncodeArrayStart(4)
			} else {
				yynn253 = 4
				for _, b := range yyq253 {
					if b {
						yynn253++
					}
				}
				r.EncodeMapStart(yynn253)
				yynn253 = 0
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym255 := z.EncBinary()
				_ = yym255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym256 := z.EncBinary()
				_ = yym256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy261 := &x.OSBMetadata
				yym262 := z.EncBinary()
				_ = yym262
				if false {
				} else if z.HasExtensions() && z.EncExt(yy261) {
				} else if !yym262 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy261)
				} else {
					z.EncFallback(yy261)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbMetadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy263 := &x.OSBMetadata
				yym264 := z.EncBinary()
				_ = yym264
				if false {
				} else if z.HasExtensions() && z.EncExt(yy263) {
				} else if !yym264 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy263)
				} else {
					z.EncFallback(yy263)
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym266 := z.EncBinary()
				_ = yym266
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbFree"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym267 := z.EncBinary()
				_ = yym267
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePlan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym268 := z.DecBinary()
	_ = yym268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct269 := r.ContainerType()
		if yyct269 == codecSelferValueTypeMap1234 {
			yyl269 := r.ReadMapStart()
			if yyl269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl269, d)
			}
		} else if yyct269 == codecSelferValueTypeArray1234 {
			yyl269 := r.ReadArrayStart()
			if yyl269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePlan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys270Slc
	var yyhl270 bool = l >= 0
	for yyj270 := 0; ; yyj270++ {
		if yyhl270 {
			if yyj270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys270Slc = r.DecodeBytes(yys270Slc, true, true)
		yys270 := string(yys270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys270 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbMetadata":
			if r.TryDecodeAsNil() {
				x.OSBMetadata = pkg4_runtime.RawExtension{}
			} else {
				yyv273 := &x.OSBMetadata
				yym274 := z.DecBinary()
				_ = yym274
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv273) {
				} else if !yym274 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv273)
				} else {
					z.DecFallback(yyv273, false)
				}
			}
		case "osbFree":
			if r.TryDecodeAsNil() {
				x.OSBFree = false
			} else {
				x.OSBFree = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys270)
		} // end switch yys270
	} // end for yyj270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePlan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj276 int
	var yyb276 bool
	var yyhl276 bool = l >= 0
	yyj276++
	if yyhl276 {
		yyb276 = yyj276 > l
	} else {
		yyb276 = r.CheckBreak()
	}
	if yyb276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj276++
	if yyhl276 {
		yyb276 = yyj276 > l
	} else {
		yyb276 = r.CheckBreak()
	}
	if yyb276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj276++
	if yyhl276 {
		yyb276 = yyj276 > l
	} else {
		yyb276 = r.CheckBreak()
	}
	if yyb276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBMetadata = pkg4_runtime.RawExtension{}
	} else {
		yyv279 := &x.OSBMetadata
		yym280 := z.DecBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv279) {
		} else if !yym280 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv279)
		} else {
			z.DecFallback(yyv279, false)
		}
	}
	yyj276++
	if yyhl276 {
		yyb276 = yyj276 > l
	} else {
		yyb276 = r.CheckBreak()
	}
	if yyb276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBFree = false
	} else {
		x.OSBFree = bool(r.DecodeBool())
	}
	for {
		yyj276++
		if yyhl276 {
			yyb276 = yyj276 > l
		} else {
			yyb276 = r.CheckBreak()
		}
		if yyb276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym282 := z.EncBinary()
		_ = yym282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep283 := !z.EncBinary()
			yy2arr283 := z.EncBasicHandle().StructToArray
			var yyq283 [4]bool
			_, _, _ = yysep283, yyq283, yy2arr283
			const yyr283 bool = false
			yyq283[0] = x.Kind != ""
			yyq283[1] = x.APIVersion != ""
			yyq283[2] = true
			var yynn283 int
			if yyr283 || yy2arr283 {
				r.EncodeArrayStart(4)
			} else {
				yynn283 = 1
				for _, b := range yyq283 {
					if b {
						yynn283++
					}
				}
				r.EncodeMapStart(yynn283)
				yynn283 = 0
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[0] {
					yym285 := z.EncBinary()
					_ = yym285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq283[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[1] {
					yym288 := z.EncBinary()
					_ = yym288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq283[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym289 := z.EncBinary()
					_ = yym289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq283[2] {
					yy291 := &x.ListMeta
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else if z.HasExtensions() && z.EncExt(yy291) {
					} else {
						z.EncFallback(yy291)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq283[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy293 := &x.ListMeta
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else if z.HasExtensions() && z.EncExt(yy293) {
					} else {
						z.EncFallback(yy293)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			}
			if yyr283 || yy2arr283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym298 := z.DecBinary()
	_ = yym298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct299 := r.ContainerType()
		if yyct299 == codecSelferValueTypeMap1234 {
			yyl299 := r.ReadMapStart()
			if yyl299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl299, d)
			}
		} else if yyct299 == codecSelferValueTypeArray1234 {
			yyl299 := r.ReadArrayStart()
			if yyl299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys300Slc
	var yyhl300 bool = l >= 0
	for yyj300 := 0; ; yyj300++ {
		if yyhl300 {
			if yyj300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys300Slc = r.DecodeBytes(yys300Slc, true, true)
		yys300 := string(yys300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv303 := &x.ListMeta
				yym304 := z.DecBinary()
				_ = yym304
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv303) {
				} else {
					z.DecFallback(yyv303, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv305 := &x.Items
				yym306 := z.DecBinary()
				_ = yym306
				if false {
				} else {
					h.decSliceInstance((*[]Instance)(yyv305), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys300)
		} // end switch yys300
	} // end for yyj300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj307 int
	var yyb307 bool
	var yyhl307 bool = l >= 0
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv310 := &x.ListMeta
		yym311 := z.DecBinary()
		_ = yym311
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv310) {
		} else {
			z.DecFallback(yyv310, false)
		}
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv312 := &x.Items
		yym313 := z.DecBinary()
		_ = yym313
		if false {
		} else {
			h.decSliceInstance((*[]Instance)(yyv312), d)
		}
	}
	for {
		yyj307++
		if yyhl307 {
			yyb307 = yyj307 > l
		} else {
			yyb307 = r.CheckBreak()
		}
		if yyb307 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj307-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym314 := z.EncBinary()
		_ = yym314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep315 := !z.EncBinary()
			yy2arr315 := z.EncBasicHandle().StructToArray
			var yyq315 [5]bool
			_, _, _ = yysep315, yyq315, yy2arr315
			const yyr315 bool = false
			yyq315[0] = x.Kind != ""
			yyq315[1] = x.APIVersion != ""
			yyq315[2] = true
			var yynn315 int
			if yyr315 || yy2arr315 {
				r.EncodeArrayStart(5)
			} else {
				yynn315 = 2
				for _, b := range yyq315 {
					if b {
						yynn315++
					}
				}
				r.EncodeMapStart(yynn315)
				yynn315 = 0
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[0] {
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[1] {
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym321 := z.EncBinary()
					_ = yym321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[2] {
					yy323 := &x.ObjectMeta
					yy323.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy324 := &x.ObjectMeta
					yy324.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy326 := &x.Spec
				yy326.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy327 := &x.Spec
				yy327.CodecEncodeSelf(e)
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy329 := &x.Status
				yy329.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy330 := &x.Status
				yy330.CodecEncodeSelf(e)
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct332 := r.ContainerType()
		if yyct332 == codecSelferValueTypeMap1234 {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if yyct332 == codecSelferValueTypeArray1234 {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv336 := &x.ObjectMeta
				yyv336.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv337 := &x.Spec
				yyv337.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv338 := &x.Status
				yyv338.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj339 int
	var yyb339 bool
	var yyhl339 bool = l >= 0
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv342 := &x.ObjectMeta
		yyv342.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv343 := &x.Spec
		yyv343.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv344 := &x.Status
		yyv344.CodecDecodeSelf(d)
	}
	for {
		yyj339++
		if yyhl339 {
			yyb339 = yyj339 > l
		} else {
			yyb339 = r.CheckBreak()
		}
		if yyb339 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj339-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyq346 [12]bool
			_, _, _ = yysep346, yyq346, yy2arr346
			const yyr346 bool = false
			var yynn346 int
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(12)
			} else {
				yynn346 = 12
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
				yynn346 = 0
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym348 := z.EncBinary()
				_ = yym348
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceClassName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym349 := z.EncBinary()
				_ = yym349
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym351 := z.EncBinary()
				_ = yym351
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym352 := z.EncBinary()
				_ = yym352
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						z.F.EncMapStringStringV(x.Parameters, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("parameters"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						z.F.EncMapStringStringV(x.Parameters, false, e)
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym357 := z.EncBinary()
				_ = yym357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym358 := z.EncBinary()
				_ = yym358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym360 := z.EncBinary()
				_ = yym360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbCredentials"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym361 := z.EncBinary()
				_ = yym361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym363 := z.EncBinary()
				_ = yym363
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym364 := z.EncBinary()
				_ = yym364
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym366 := z.EncBinary()
				_ = yym366
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbInternalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym367 := z.EncBinary()
				_ = yym367
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym369 := z.EncBinary()
				_ = yym369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbServiceID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym370 := z.EncBinary()
				_ = yym370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym372 := z.EncBinary()
				_ = yym372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbPlanID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym373 := z.EncBinary()
				_ = yym373
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym375 := z.EncBinary()
				_ = yym375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym376 := z.EncBinary()
				_ = yym376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym378 := z.EncBinary()
				_ = yym378
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbSpaceGUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym379 := z.EncBinary()
				_ = yym379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym381 := z.EncBinary()
				_ = yym381
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbLastOperation"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym382 := z.EncBinary()
				_ = yym382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym383 := z.DecBinary()
	_ = yym383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct384 := r.ContainerType()
		if yyct384 == codecSelferValueTypeMap1234 {
			yyl384 := r.ReadMapStart()
			if yyl384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl384, d)
			}
		} else if yyct384 == codecSelferValueTypeArray1234 {
			yyl384 := r.ReadArrayStart()
			if yyl384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys385Slc
	var yyhl385 bool = l >= 0
	for yyj385 := 0; ; yyj385++ {
		if yyhl385 {
			if yyj385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys385Slc = r.DecodeBytes(yys385Slc, true, true)
		yys385 := string(yys385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys385 {
		case "serviceClassName":
			if r.TryDecodeAsNil() {
				x.ServiceClassName = ""
			} else {
				x.ServiceClassName = string(r.DecodeString())
			}
		case "planName":
			if r.TryDecodeAsNil() {
				x.PlanName = ""
			} else {
				x.PlanName = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				yyv388 := &x.Parameters
				yym389 := z.DecBinary()
				_ = yym389
				if false {
				} else {
					z.F.DecMapStringStringX(yyv388, false, d)
				}
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbCredentials":
			if r.TryDecodeAsNil() {
				x.OSBCredentials = ""
			} else {
				x.OSBCredentials = string(r.DecodeString())
			}
		case "osbDashboardURL":
			if r.TryDecodeAsNil() {
				x.OSBDashboardURL = ""
			} else {
				x.OSBDashboardURL = string(r.DecodeString())
			}
		case "osbInternalID":
			if r.TryDecodeAsNil() {
				x.OSBInternalID = ""
			} else {
				x.OSBInternalID = string(r.DecodeString())
			}
		case "osbServiceID":
			if r.TryDecodeAsNil() {
				x.OSBServiceID = ""
			} else {
				x.OSBServiceID = string(r.DecodeString())
			}
		case "osbPlanID":
			if r.TryDecodeAsNil() {
				x.OSBPlanID = ""
			} else {
				x.OSBPlanID = string(r.DecodeString())
			}
		case "osbType":
			if r.TryDecodeAsNil() {
				x.OSBType = ""
			} else {
				x.OSBType = string(r.DecodeString())
			}
		case "osbSpaceGUID":
			if r.TryDecodeAsNil() {
				x.OSBSpaceGUID = ""
			} else {
				x.OSBSpaceGUID = string(r.DecodeString())
			}
		case "osbLastOperation":
			if r.TryDecodeAsNil() {
				x.OSBLastOperation = ""
			} else {
				x.OSBLastOperation = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys385)
		} // end switch yys385
	} // end for yyj385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj399 int
	var yyb399 bool
	var yyhl399 bool = l >= 0
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceClassName = ""
	} else {
		x.ServiceClassName = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanName = ""
	} else {
		x.PlanName = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		yyv402 := &x.Parameters
		yym403 := z.DecBinary()
		_ = yym403
		if false {
		} else {
			z.F.DecMapStringStringX(yyv402, false, d)
		}
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBCredentials = ""
	} else {
		x.OSBCredentials = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardURL = ""
	} else {
		x.OSBDashboardURL = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBInternalID = ""
	} else {
		x.OSBInternalID = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBServiceID = ""
	} else {
		x.OSBServiceID = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBPlanID = ""
	} else {
		x.OSBPlanID = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBType = ""
	} else {
		x.OSBType = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBSpaceGUID = ""
	} else {
		x.OSBSpaceGUID = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBLastOperation = ""
	} else {
		x.OSBLastOperation = string(r.DecodeString())
	}
	for {
		yyj399++
		if yyhl399 {
			yyb399 = yyj399 > l
		} else {
			yyb399 = r.CheckBreak()
		}
		if yyb399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym413 := z.EncBinary()
		_ = yym413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep414 := !z.EncBinary()
			yy2arr414 := z.EncBasicHandle().StructToArray
			var yyq414 [1]bool
			_, _, _ = yysep414, yyq414, yy2arr414
			const yyr414 bool = false
			var yynn414 int
			if yyr414 || yy2arr414 {
				r.EncodeArrayStart(1)
			} else {
				yynn414 = 1
				for _, b := range yyq414 {
					if b {
						yynn414++
					}
				}
				r.EncodeMapStart(yynn414)
				yynn414 = 0
			}
			if yyr414 || yy2arr414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym416 := z.EncBinary()
					_ = yym416
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			}
			if yyr414 || yy2arr414 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym418 := z.DecBinary()
	_ = yym418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct419 := r.ContainerType()
		if yyct419 == codecSelferValueTypeMap1234 {
			yyl419 := r.ReadMapStart()
			if yyl419 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl419, d)
			}
		} else if yyct419 == codecSelferValueTypeArray1234 {
			yyl419 := r.ReadArrayStart()
			if yyl419 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl419, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys420Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys420Slc
	var yyhl420 bool = l >= 0
	for yyj420 := 0; ; yyj420++ {
		if yyhl420 {
			if yyj420 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys420Slc = r.DecodeBytes(yys420Slc, true, true)
		yys420 := string(yys420Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys420 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv421 := &x.Conditions
				yym422 := z.DecBinary()
				_ = yym422
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv421), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys420)
		} // end switch yys420
	} // end for yyj420
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj423 int
	var yyb423 bool
	var yyhl423 bool = l >= 0
	yyj423++
	if yyhl423 {
		yyb423 = yyj423 > l
	} else {
		yyb423 = r.CheckBreak()
	}
	if yyb423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv424 := &x.Conditions
		yym425 := z.DecBinary()
		_ = yym425
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv424), d)
		}
	}
	for {
		yyj423++
		if yyhl423 {
			yyb423 = yyj423 > l
		} else {
			yyb423 = r.CheckBreak()
		}
		if yyb423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym426 := z.EncBinary()
		_ = yym426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep427 := !z.EncBinary()
			yy2arr427 := z.EncBasicHandle().StructToArray
			var yyq427 [4]bool
			_, _, _ = yysep427, yyq427, yy2arr427
			const yyr427 bool = false
			var yynn427 int
			if yyr427 || yy2arr427 {
				r.EncodeArrayStart(4)
			} else {
				yynn427 = 4
				for _, b := range yyq427 {
					if b {
						yynn427++
					}
				}
				r.EncodeMapStart(yynn427)
				yynn427 = 0
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym431 := z.EncBinary()
				_ = yym431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym432 := z.EncBinary()
				_ = yym432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym434 := z.EncBinary()
				_ = yym434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym435 := z.EncBinary()
				_ = yym435
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym436 := z.DecBinary()
	_ = yym436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct437 := r.ContainerType()
		if yyct437 == codecSelferValueTypeMap1234 {
			yyl437 := r.ReadMapStart()
			if yyl437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl437, d)
			}
		} else if yyct437 == codecSelferValueTypeArray1234 {
			yyl437 := r.ReadArrayStart()
			if yyl437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys438Slc
	var yyhl438 bool = l >= 0
	for yyj438 := 0; ; yyj438++ {
		if yyhl438 {
			if yyj438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys438Slc = r.DecodeBytes(yys438Slc, true, true)
		yys438 := string(yys438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys438 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys438)
		} // end switch yys438
	} // end for yyj438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj443 int
	var yyb443 bool
	var yyhl443 bool = l >= 0
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj443++
		if yyhl443 {
			yyb443 = yyj443 > l
		} else {
			yyb443 = r.CheckBreak()
		}
		if yyb443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym448 := z.EncBinary()
	_ = yym448
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym449 := z.DecBinary()
	_ = yym449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *BindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym450 := z.EncBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep451 := !z.EncBinary()
			yy2arr451 := z.EncBasicHandle().StructToArray
			var yyq451 [4]bool
			_, _, _ = yysep451, yyq451, yy2arr451
			const yyr451 bool = false
			yyq451[0] = x.Kind != ""
			yyq451[1] = x.APIVersion != ""
			yyq451[2] = true
			var yynn451 int
			if yyr451 || yy2arr451 {
				r.EncodeArrayStart(4)
			} else {
				yynn451 = 1
				for _, b := range yyq451 {
					if b {
						yynn451++
					}
				}
				r.EncodeMapStart(yynn451)
				yynn451 = 0
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[0] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[1] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[2] {
					yy459 := &x.ListMeta
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else if z.HasExtensions() && z.EncExt(yy459) {
					} else {
						z.EncFallback(yy459)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy461 := &x.ListMeta
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else if z.HasExtensions() && z.EncExt(yy461) {
					} else {
						z.EncFallback(yy461)
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym466 := z.DecBinary()
	_ = yym466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct467 := r.ContainerType()
		if yyct467 == codecSelferValueTypeMap1234 {
			yyl467 := r.ReadMapStart()
			if yyl467 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl467, d)
			}
		} else if yyct467 == codecSelferValueTypeArray1234 {
			yyl467 := r.ReadArrayStart()
			if yyl467 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys468Slc
	var yyhl468 bool = l >= 0
	for yyj468 := 0; ; yyj468++ {
		if yyhl468 {
			if yyj468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys468Slc = r.DecodeBytes(yys468Slc, true, true)
		yys468 := string(yys468Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys468 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv471 := &x.ListMeta
				yym472 := z.DecBinary()
				_ = yym472
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv471) {
				} else {
					z.DecFallback(yyv471, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv473 := &x.Items
				yym474 := z.DecBinary()
				_ = yym474
				if false {
				} else {
					h.decSliceBinding((*[]Binding)(yyv473), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys468)
		} // end switch yys468
	} // end for yyj468
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj475 int
	var yyb475 bool
	var yyhl475 bool = l >= 0
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv478 := &x.ListMeta
		yym479 := z.DecBinary()
		_ = yym479
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv478) {
		} else {
			z.DecFallback(yyv478, false)
		}
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv480 := &x.Items
		yym481 := z.DecBinary()
		_ = yym481
		if false {
		} else {
			h.decSliceBinding((*[]Binding)(yyv480), d)
		}
	}
	for {
		yyj475++
		if yyhl475 {
			yyb475 = yyj475 > l
		} else {
			yyb475 = r.CheckBreak()
		}
		if yyb475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym482 := z.EncBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep483 := !z.EncBinary()
			yy2arr483 := z.EncBasicHandle().StructToArray
			var yyq483 [5]bool
			_, _, _ = yysep483, yyq483, yy2arr483
			const yyr483 bool = false
			yyq483[0] = x.Kind != ""
			yyq483[1] = x.APIVersion != ""
			yyq483[2] = true
			var yynn483 int
			if yyr483 || yy2arr483 {
				r.EncodeArrayStart(5)
			} else {
				yynn483 = 2
				for _, b := range yyq483 {
					if b {
						yynn483++
					}
				}
				r.EncodeMapStart(yynn483)
				yynn483 = 0
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[0] {
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym486 := z.EncBinary()
					_ = yym486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[1] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq483[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[2] {
					yy491 := &x.ObjectMeta
					yy491.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq483[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy492 := &x.ObjectMeta
					yy492.CodecEncodeSelf(e)
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy494 := &x.Spec
				yy494.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy495 := &x.Spec
				yy495.CodecEncodeSelf(e)
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy497 := &x.Status
				yy497.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy498 := &x.Status
				yy498.CodecEncodeSelf(e)
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym499 := z.DecBinary()
	_ = yym499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct500 := r.ContainerType()
		if yyct500 == codecSelferValueTypeMap1234 {
			yyl500 := r.ReadMapStart()
			if yyl500 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl500, d)
			}
		} else if yyct500 == codecSelferValueTypeArray1234 {
			yyl500 := r.ReadArrayStart()
			if yyl500 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys501Slc
	var yyhl501 bool = l >= 0
	for yyj501 := 0; ; yyj501++ {
		if yyhl501 {
			if yyj501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys501Slc = r.DecodeBytes(yys501Slc, true, true)
		yys501 := string(yys501Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys501 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv504 := &x.ObjectMeta
				yyv504.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BindingSpec{}
			} else {
				yyv505 := &x.Spec
				yyv505.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BindingStatus{}
			} else {
				yyv506 := &x.Status
				yyv506.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys501)
		} // end switch yys501
	} // end for yyj501
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj507 int
	var yyb507 bool
	var yyhl507 bool = l >= 0
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv510 := &x.ObjectMeta
		yyv510.CodecDecodeSelf(d)
	}
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BindingSpec{}
	} else {
		yyv511 := &x.Spec
		yyv511.CodecDecodeSelf(d)
	}
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BindingStatus{}
	} else {
		yyv512 := &x.Status
		yyv512.CodecDecodeSelf(d)
	}
	for {
		yyj507++
		if yyhl507 {
			yyb507 = yyj507 > l
		} else {
			yyb507 = r.CheckBreak()
		}
		if yyb507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym513 := z.EncBinary()
		_ = yym513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep514 := !z.EncBinary()
			yy2arr514 := z.EncBasicHandle().StructToArray
			var yyq514 [7]bool
			_, _, _ = yysep514, yyq514, yy2arr514
			const yyr514 bool = false
			var yynn514 int
			if yyr514 || yy2arr514 {
				r.EncodeArrayStart(7)
			} else {
				yynn514 = 7
				for _, b := range yyq514 {
					if b {
						yynn514++
					}
				}
				r.EncodeMapStart(yynn514)
				yynn514 = 0
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy516 := &x.InstanceRef
				yy516.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("instanceRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy517 := &x.InstanceRef
				yy517.CodecEncodeSelf(e)
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy519 := &x.AppLabelSelector
				yym520 := z.EncBinary()
				_ = yym520
				if false {
				} else if z.HasExtensions() && z.EncExt(yy519) {
				} else {
					z.EncFallback(yy519)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("appLabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy521 := &x.AppLabelSelector
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else if z.HasExtensions() && z.EncExt(yy521) {
				} else {
					z.EncFallback(yy521)
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym524 := z.EncBinary()
					_ = yym524
					if false {
					} else {
						z.F.EncMapStringStringV(x.Parameters, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("parameters"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						z.F.EncMapStringStringV(x.Parameters, false, e)
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym528 := z.EncBinary()
				_ = yym528
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym530 := z.EncBinary()
				_ = yym530
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym531 := z.EncBinary()
				_ = yym531
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym533 := z.EncBinary()
				_ = yym533
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("configMapName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym534 := z.EncBinary()
				_ = yym534
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym536 := z.EncBinary()
				_ = yym536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym537 := z.EncBinary()
				_ = yym537
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct539 := r.ContainerType()
		if yyct539 == codecSelferValueTypeMap1234 {
			yyl539 := r.ReadMapStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl539, d)
			}
		} else if yyct539 == codecSelferValueTypeArray1234 {
			yyl539 := r.ReadArrayStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys540Slc
	var yyhl540 bool = l >= 0
	for yyj540 := 0; ; yyj540++ {
		if yyhl540 {
			if yyj540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys540Slc = r.DecodeBytes(yys540Slc, true, true)
		yys540 := string(yys540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys540 {
		case "instanceRef":
			if r.TryDecodeAsNil() {
				x.InstanceRef = pkg2_v1.ObjectReference{}
			} else {
				yyv541 := &x.InstanceRef
				yyv541.CodecDecodeSelf(d)
			}
		case "appLabelSelector":
			if r.TryDecodeAsNil() {
				x.AppLabelSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv542 := &x.AppLabelSelector
				yym543 := z.DecBinary()
				_ = yym543
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv542) {
				} else {
					z.DecFallback(yyv542, false)
				}
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				yyv544 := &x.Parameters
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else {
					z.F.DecMapStringStringX(yyv544, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "configMapName":
			if r.TryDecodeAsNil() {
				x.ConfigMapName = ""
			} else {
				x.ConfigMapName = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys540)
		} // end switch yys540
	} // end for yyj540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj550 int
	var yyb550 bool
	var yyhl550 bool = l >= 0
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceRef = pkg2_v1.ObjectReference{}
	} else {
		yyv551 := &x.InstanceRef
		yyv551.CodecDecodeSelf(d)
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AppLabelSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv552 := &x.AppLabelSelector
		yym553 := z.DecBinary()
		_ = yym553
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv552) {
		} else {
			z.DecFallback(yyv552, false)
		}
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		yyv554 := &x.Parameters
		yym555 := z.DecBinary()
		_ = yym555
		if false {
		} else {
			z.F.DecMapStringStringX(yyv554, false, d)
		}
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConfigMapName = ""
	} else {
		x.ConfigMapName = string(r.DecodeString())
	}
	yyj550++
	if yyhl550 {
		yyb550 = yyj550 > l
	} else {
		yyb550 = r.CheckBreak()
	}
	if yyb550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj550++
		if yyhl550 {
			yyb550 = yyj550 > l
		} else {
			yyb550 = r.CheckBreak()
		}
		if yyb550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [1]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(1)
			} else {
				yynn561 = 1
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym565 := z.DecBinary()
	_ = yym565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct566 := r.ContainerType()
		if yyct566 == codecSelferValueTypeMap1234 {
			yyl566 := r.ReadMapStart()
			if yyl566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl566, d)
			}
		} else if yyct566 == codecSelferValueTypeArray1234 {
			yyl566 := r.ReadArrayStart()
			if yyl566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys567Slc
	var yyhl567 bool = l >= 0
	for yyj567 := 0; ; yyj567++ {
		if yyhl567 {
			if yyj567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys567Slc = r.DecodeBytes(yys567Slc, true, true)
		yys567 := string(yys567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys567 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv568 := &x.Conditions
				yym569 := z.DecBinary()
				_ = yym569
				if false {
				} else {
					h.decSliceBindingCondition((*[]BindingCondition)(yyv568), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys567)
		} // end switch yys567
	} // end for yyj567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj570 int
	var yyb570 bool
	var yyhl570 bool = l >= 0
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv571 := &x.Conditions
		yym572 := z.DecBinary()
		_ = yym572
		if false {
		} else {
			h.decSliceBindingCondition((*[]BindingCondition)(yyv571), d)
		}
	}
	for {
		yyj570++
		if yyhl570 {
			yyb570 = yyj570 > l
		} else {
			yyb570 = r.CheckBreak()
		}
		if yyb570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym573 := z.EncBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep574 := !z.EncBinary()
			yy2arr574 := z.EncBasicHandle().StructToArray
			var yyq574 [4]bool
			_, _, _ = yysep574, yyq574, yy2arr574
			const yyr574 bool = false
			var yynn574 int
			if yyr574 || yy2arr574 {
				r.EncodeArrayStart(4)
			} else {
				yynn574 = 4
				for _, b := range yyq574 {
					if b {
						yynn574++
					}
				}
				r.EncodeMapStart(yynn574)
				yynn574 = 0
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym578 := z.EncBinary()
				_ = yym578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym579 := z.EncBinary()
				_ = yym579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym581 := z.EncBinary()
				_ = yym581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym582 := z.EncBinary()
				_ = yym582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr574 || yy2arr574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct584 := r.ContainerType()
		if yyct584 == codecSelferValueTypeMap1234 {
			yyl584 := r.ReadMapStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl584, d)
			}
		} else if yyct584 == codecSelferValueTypeArray1234 {
			yyl584 := r.ReadArrayStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys585Slc
	var yyhl585 bool = l >= 0
	for yyj585 := 0; ; yyj585++ {
		if yyhl585 {
			if yyj585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys585Slc = r.DecodeBytes(yys585Slc, true, true)
		yys585 := string(yys585Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys585 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BindingConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys585)
		} // end switch yys585
	} // end for yyj585
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj590 int
	var yyb590 bool
	var yyhl590 bool = l >= 0
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BindingConditionType(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj590++
	if yyhl590 {
		yyb590 = yyj590 > l
	} else {
		yyb590 = r.CheckBreak()
	}
	if yyb590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj590++
		if yyhl590 {
			yyb590 = yyj590 > l
		} else {
			yyb590 = r.CheckBreak()
		}
		if yyb590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BindingConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym595 := z.EncBinary()
	_ = yym595
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BindingConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceBroker(v []Broker, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy598 := &yyv597
		yy598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBroker(v *[]Broker, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv599 := *v
	yyh599, yyl599 := z.DecSliceHelperStart()
	var yyc599 bool
	if yyl599 == 0 {
		if yyv599 == nil {
			yyv599 = []Broker{}
			yyc599 = true
		} else if len(yyv599) != 0 {
			yyv599 = yyv599[:0]
			yyc599 = true
		}
	} else if yyl599 > 0 {
		var yyrr599, yyrl599 int
		var yyrt599 bool
		if yyl599 > cap(yyv599) {

			yyrg599 := len(yyv599) > 0
			yyv2599 := yyv599
			yyrl599, yyrt599 = z.DecInferLen(yyl599, z.DecBasicHandle().MaxInitLen, 344)
			if yyrt599 {
				if yyrl599 <= cap(yyv599) {
					yyv599 = yyv599[:yyrl599]
				} else {
					yyv599 = make([]Broker, yyrl599)
				}
			} else {
				yyv599 = make([]Broker, yyrl599)
			}
			yyc599 = true
			yyrr599 = len(yyv599)
			if yyrg599 {
				copy(yyv599, yyv2599)
			}
		} else if yyl599 != len(yyv599) {
			yyv599 = yyv599[:yyl599]
			yyc599 = true
		}
		yyj599 := 0
		for ; yyj599 < yyrr599; yyj599++ {
			yyh599.ElemContainerState(yyj599)
			if r.TryDecodeAsNil() {
				yyv599[yyj599] = Broker{}
			} else {
				yyv600 := &yyv599[yyj599]
				yyv600.CodecDecodeSelf(d)
			}

		}
		if yyrt599 {
			for ; yyj599 < yyl599; yyj599++ {
				yyv599 = append(yyv599, Broker{})
				yyh599.ElemContainerState(yyj599)
				if r.TryDecodeAsNil() {
					yyv599[yyj599] = Broker{}
				} else {
					yyv601 := &yyv599[yyj599]
					yyv601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj599 := 0
		for ; !r.CheckBreak(); yyj599++ {

			if yyj599 >= len(yyv599) {
				yyv599 = append(yyv599, Broker{}) // var yyz599 Broker
				yyc599 = true
			}
			yyh599.ElemContainerState(yyj599)
			if yyj599 < len(yyv599) {
				if r.TryDecodeAsNil() {
					yyv599[yyj599] = Broker{}
				} else {
					yyv602 := &yyv599[yyj599]
					yyv602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj599 < len(yyv599) {
			yyv599 = yyv599[:yyj599]
			yyc599 = true
		} else if yyj599 == 0 && yyv599 == nil {
			yyv599 = []Broker{}
			yyc599 = true
		}
	}
	yyh599.End()
	if yyc599 {
		*v = yyv599
	}
}

func (x codecSelfer1234) encSliceBrokerCondition(v []BrokerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy604 := &yyv603
		yy604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBrokerCondition(v *[]BrokerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv605 := *v
	yyh605, yyl605 := z.DecSliceHelperStart()
	var yyc605 bool
	if yyl605 == 0 {
		if yyv605 == nil {
			yyv605 = []BrokerCondition{}
			yyc605 = true
		} else if len(yyv605) != 0 {
			yyv605 = yyv605[:0]
			yyc605 = true
		}
	} else if yyl605 > 0 {
		var yyrr605, yyrl605 int
		var yyrt605 bool
		if yyl605 > cap(yyv605) {

			yyrg605 := len(yyv605) > 0
			yyv2605 := yyv605
			yyrl605, yyrt605 = z.DecInferLen(yyl605, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt605 {
				if yyrl605 <= cap(yyv605) {
					yyv605 = yyv605[:yyrl605]
				} else {
					yyv605 = make([]BrokerCondition, yyrl605)
				}
			} else {
				yyv605 = make([]BrokerCondition, yyrl605)
			}
			yyc605 = true
			yyrr605 = len(yyv605)
			if yyrg605 {
				copy(yyv605, yyv2605)
			}
		} else if yyl605 != len(yyv605) {
			yyv605 = yyv605[:yyl605]
			yyc605 = true
		}
		yyj605 := 0
		for ; yyj605 < yyrr605; yyj605++ {
			yyh605.ElemContainerState(yyj605)
			if r.TryDecodeAsNil() {
				yyv605[yyj605] = BrokerCondition{}
			} else {
				yyv606 := &yyv605[yyj605]
				yyv606.CodecDecodeSelf(d)
			}

		}
		if yyrt605 {
			for ; yyj605 < yyl605; yyj605++ {
				yyv605 = append(yyv605, BrokerCondition{})
				yyh605.ElemContainerState(yyj605)
				if r.TryDecodeAsNil() {
					yyv605[yyj605] = BrokerCondition{}
				} else {
					yyv607 := &yyv605[yyj605]
					yyv607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj605 := 0
		for ; !r.CheckBreak(); yyj605++ {

			if yyj605 >= len(yyv605) {
				yyv605 = append(yyv605, BrokerCondition{}) // var yyz605 BrokerCondition
				yyc605 = true
			}
			yyh605.ElemContainerState(yyj605)
			if yyj605 < len(yyv605) {
				if r.TryDecodeAsNil() {
					yyv605[yyj605] = BrokerCondition{}
				} else {
					yyv608 := &yyv605[yyj605]
					yyv608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj605 < len(yyv605) {
			yyv605 = yyv605[:yyj605]
			yyc605 = true
		} else if yyj605 == 0 && yyv605 == nil {
			yyv605 = []BrokerCondition{}
			yyc605 = true
		}
	}
	yyh605.End()
	if yyc605 {
		*v = yyv605
	}
}

func (x codecSelfer1234) encSliceServiceClass(v []ServiceClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy610 := &yyv609
		yy610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceClass(v *[]ServiceClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv611 := *v
	yyh611, yyl611 := z.DecSliceHelperStart()
	var yyc611 bool
	if yyl611 == 0 {
		if yyv611 == nil {
			yyv611 = []ServiceClass{}
			yyc611 = true
		} else if len(yyv611) != 0 {
			yyv611 = yyv611[:0]
			yyc611 = true
		}
	} else if yyl611 > 0 {
		var yyrr611, yyrl611 int
		var yyrt611 bool
		if yyl611 > cap(yyv611) {

			yyrg611 := len(yyv611) > 0
			yyv2611 := yyv611
			yyrl611, yyrt611 = z.DecInferLen(yyl611, z.DecBasicHandle().MaxInitLen, 480)
			if yyrt611 {
				if yyrl611 <= cap(yyv611) {
					yyv611 = yyv611[:yyrl611]
				} else {
					yyv611 = make([]ServiceClass, yyrl611)
				}
			} else {
				yyv611 = make([]ServiceClass, yyrl611)
			}
			yyc611 = true
			yyrr611 = len(yyv611)
			if yyrg611 {
				copy(yyv611, yyv2611)
			}
		} else if yyl611 != len(yyv611) {
			yyv611 = yyv611[:yyl611]
			yyc611 = true
		}
		yyj611 := 0
		for ; yyj611 < yyrr611; yyj611++ {
			yyh611.ElemContainerState(yyj611)
			if r.TryDecodeAsNil() {
				yyv611[yyj611] = ServiceClass{}
			} else {
				yyv612 := &yyv611[yyj611]
				yyv612.CodecDecodeSelf(d)
			}

		}
		if yyrt611 {
			for ; yyj611 < yyl611; yyj611++ {
				yyv611 = append(yyv611, ServiceClass{})
				yyh611.ElemContainerState(yyj611)
				if r.TryDecodeAsNil() {
					yyv611[yyj611] = ServiceClass{}
				} else {
					yyv613 := &yyv611[yyj611]
					yyv613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj611 := 0
		for ; !r.CheckBreak(); yyj611++ {

			if yyj611 >= len(yyv611) {
				yyv611 = append(yyv611, ServiceClass{}) // var yyz611 ServiceClass
				yyc611 = true
			}
			yyh611.ElemContainerState(yyj611)
			if yyj611 < len(yyv611) {
				if r.TryDecodeAsNil() {
					yyv611[yyj611] = ServiceClass{}
				} else {
					yyv614 := &yyv611[yyj611]
					yyv614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj611 < len(yyv611) {
			yyv611 = yyv611[:yyj611]
			yyc611 = true
		} else if yyj611 == 0 && yyv611 == nil {
			yyv611 = []ServiceClass{}
			yyc611 = true
		}
	}
	yyh611.End()
	if yyc611 {
		*v = yyv611
	}
}

func (x codecSelfer1234) encSliceServicePlan(v []ServicePlan, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy616 := &yyv615
		yy616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePlan(v *[]ServicePlan, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv617 := *v
	yyh617, yyl617 := z.DecSliceHelperStart()
	var yyc617 bool
	if yyl617 == 0 {
		if yyv617 == nil {
			yyv617 = []ServicePlan{}
			yyc617 = true
		} else if len(yyv617) != 0 {
			yyv617 = yyv617[:0]
			yyc617 = true
		}
	} else if yyl617 > 0 {
		var yyrr617, yyrl617 int
		var yyrt617 bool
		if yyl617 > cap(yyv617) {

			yyrg617 := len(yyv617) > 0
			yyv2617 := yyv617
			yyrl617, yyrt617 = z.DecInferLen(yyl617, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt617 {
				if yyrl617 <= cap(yyv617) {
					yyv617 = yyv617[:yyrl617]
				} else {
					yyv617 = make([]ServicePlan, yyrl617)
				}
			} else {
				yyv617 = make([]ServicePlan, yyrl617)
			}
			yyc617 = true
			yyrr617 = len(yyv617)
			if yyrg617 {
				copy(yyv617, yyv2617)
			}
		} else if yyl617 != len(yyv617) {
			yyv617 = yyv617[:yyl617]
			yyc617 = true
		}
		yyj617 := 0
		for ; yyj617 < yyrr617; yyj617++ {
			yyh617.ElemContainerState(yyj617)
			if r.TryDecodeAsNil() {
				yyv617[yyj617] = ServicePlan{}
			} else {
				yyv618 := &yyv617[yyj617]
				yyv618.CodecDecodeSelf(d)
			}

		}
		if yyrt617 {
			for ; yyj617 < yyl617; yyj617++ {
				yyv617 = append(yyv617, ServicePlan{})
				yyh617.ElemContainerState(yyj617)
				if r.TryDecodeAsNil() {
					yyv617[yyj617] = ServicePlan{}
				} else {
					yyv619 := &yyv617[yyj617]
					yyv619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj617 := 0
		for ; !r.CheckBreak(); yyj617++ {

			if yyj617 >= len(yyv617) {
				yyv617 = append(yyv617, ServicePlan{}) // var yyz617 ServicePlan
				yyc617 = true
			}
			yyh617.ElemContainerState(yyj617)
			if yyj617 < len(yyv617) {
				if r.TryDecodeAsNil() {
					yyv617[yyj617] = ServicePlan{}
				} else {
					yyv620 := &yyv617[yyj617]
					yyv620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj617 < len(yyv617) {
			yyv617 = yyv617[:yyj617]
			yyc617 = true
		} else if yyj617 == 0 && yyv617 == nil {
			yyv617 = []ServicePlan{}
			yyc617 = true
		}
	}
	yyh617.End()
	if yyc617 {
		*v = yyv617
	}
}

func (x codecSelfer1234) encSliceInstance(v []Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy622 := &yyv621
		yy622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstance(v *[]Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv623 := *v
	yyh623, yyl623 := z.DecSliceHelperStart()
	var yyc623 bool
	if yyl623 == 0 {
		if yyv623 == nil {
			yyv623 = []Instance{}
			yyc623 = true
		} else if len(yyv623) != 0 {
			yyv623 = yyv623[:0]
			yyc623 = true
		}
	} else if yyl623 > 0 {
		var yyrr623, yyrl623 int
		var yyrt623 bool
		if yyl623 > cap(yyv623) {

			yyrg623 := len(yyv623) > 0
			yyv2623 := yyv623
			yyrl623, yyrt623 = z.DecInferLen(yyl623, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt623 {
				if yyrl623 <= cap(yyv623) {
					yyv623 = yyv623[:yyrl623]
				} else {
					yyv623 = make([]Instance, yyrl623)
				}
			} else {
				yyv623 = make([]Instance, yyrl623)
			}
			yyc623 = true
			yyrr623 = len(yyv623)
			if yyrg623 {
				copy(yyv623, yyv2623)
			}
		} else if yyl623 != len(yyv623) {
			yyv623 = yyv623[:yyl623]
			yyc623 = true
		}
		yyj623 := 0
		for ; yyj623 < yyrr623; yyj623++ {
			yyh623.ElemContainerState(yyj623)
			if r.TryDecodeAsNil() {
				yyv623[yyj623] = Instance{}
			} else {
				yyv624 := &yyv623[yyj623]
				yyv624.CodecDecodeSelf(d)
			}

		}
		if yyrt623 {
			for ; yyj623 < yyl623; yyj623++ {
				yyv623 = append(yyv623, Instance{})
				yyh623.ElemContainerState(yyj623)
				if r.TryDecodeAsNil() {
					yyv623[yyj623] = Instance{}
				} else {
					yyv625 := &yyv623[yyj623]
					yyv625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj623 := 0
		for ; !r.CheckBreak(); yyj623++ {

			if yyj623 >= len(yyv623) {
				yyv623 = append(yyv623, Instance{}) // var yyz623 Instance
				yyc623 = true
			}
			yyh623.ElemContainerState(yyj623)
			if yyj623 < len(yyv623) {
				if r.TryDecodeAsNil() {
					yyv623[yyj623] = Instance{}
				} else {
					yyv626 := &yyv623[yyj623]
					yyv626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj623 < len(yyv623) {
			yyv623 = yyv623[:yyj623]
			yyc623 = true
		} else if yyj623 == 0 && yyv623 == nil {
			yyv623 = []Instance{}
			yyc623 = true
		}
	}
	yyh623.End()
	if yyc623 {
		*v = yyv623
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy628 := &yyv627
		yy628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv629 := *v
	yyh629, yyl629 := z.DecSliceHelperStart()
	var yyc629 bool
	if yyl629 == 0 {
		if yyv629 == nil {
			yyv629 = []InstanceCondition{}
			yyc629 = true
		} else if len(yyv629) != 0 {
			yyv629 = yyv629[:0]
			yyc629 = true
		}
	} else if yyl629 > 0 {
		var yyrr629, yyrl629 int
		var yyrt629 bool
		if yyl629 > cap(yyv629) {

			yyrg629 := len(yyv629) > 0
			yyv2629 := yyv629
			yyrl629, yyrt629 = z.DecInferLen(yyl629, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt629 {
				if yyrl629 <= cap(yyv629) {
					yyv629 = yyv629[:yyrl629]
				} else {
					yyv629 = make([]InstanceCondition, yyrl629)
				}
			} else {
				yyv629 = make([]InstanceCondition, yyrl629)
			}
			yyc629 = true
			yyrr629 = len(yyv629)
			if yyrg629 {
				copy(yyv629, yyv2629)
			}
		} else if yyl629 != len(yyv629) {
			yyv629 = yyv629[:yyl629]
			yyc629 = true
		}
		yyj629 := 0
		for ; yyj629 < yyrr629; yyj629++ {
			yyh629.ElemContainerState(yyj629)
			if r.TryDecodeAsNil() {
				yyv629[yyj629] = InstanceCondition{}
			} else {
				yyv630 := &yyv629[yyj629]
				yyv630.CodecDecodeSelf(d)
			}

		}
		if yyrt629 {
			for ; yyj629 < yyl629; yyj629++ {
				yyv629 = append(yyv629, InstanceCondition{})
				yyh629.ElemContainerState(yyj629)
				if r.TryDecodeAsNil() {
					yyv629[yyj629] = InstanceCondition{}
				} else {
					yyv631 := &yyv629[yyj629]
					yyv631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj629 := 0
		for ; !r.CheckBreak(); yyj629++ {

			if yyj629 >= len(yyv629) {
				yyv629 = append(yyv629, InstanceCondition{}) // var yyz629 InstanceCondition
				yyc629 = true
			}
			yyh629.ElemContainerState(yyj629)
			if yyj629 < len(yyv629) {
				if r.TryDecodeAsNil() {
					yyv629[yyj629] = InstanceCondition{}
				} else {
					yyv632 := &yyv629[yyj629]
					yyv632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj629 < len(yyv629) {
			yyv629 = yyv629[:yyj629]
			yyc629 = true
		} else if yyj629 == 0 && yyv629 == nil {
			yyv629 = []InstanceCondition{}
			yyc629 = true
		}
	}
	yyh629.End()
	if yyc629 {
		*v = yyv629
	}
}

func (x codecSelfer1234) encSliceBinding(v []Binding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy634 := &yyv633
		yy634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBinding(v *[]Binding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv635 := *v
	yyh635, yyl635 := z.DecSliceHelperStart()
	var yyc635 bool
	if yyl635 == 0 {
		if yyv635 == nil {
			yyv635 = []Binding{}
			yyc635 = true
		} else if len(yyv635) != 0 {
			yyv635 = yyv635[:0]
			yyc635 = true
		}
	} else if yyl635 > 0 {
		var yyrr635, yyrl635 int
		var yyrt635 bool
		if yyl635 > cap(yyv635) {

			yyrg635 := len(yyv635) > 0
			yyv2635 := yyv635
			yyrl635, yyrt635 = z.DecInferLen(yyl635, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt635 {
				if yyrl635 <= cap(yyv635) {
					yyv635 = yyv635[:yyrl635]
				} else {
					yyv635 = make([]Binding, yyrl635)
				}
			} else {
				yyv635 = make([]Binding, yyrl635)
			}
			yyc635 = true
			yyrr635 = len(yyv635)
			if yyrg635 {
				copy(yyv635, yyv2635)
			}
		} else if yyl635 != len(yyv635) {
			yyv635 = yyv635[:yyl635]
			yyc635 = true
		}
		yyj635 := 0
		for ; yyj635 < yyrr635; yyj635++ {
			yyh635.ElemContainerState(yyj635)
			if r.TryDecodeAsNil() {
				yyv635[yyj635] = Binding{}
			} else {
				yyv636 := &yyv635[yyj635]
				yyv636.CodecDecodeSelf(d)
			}

		}
		if yyrt635 {
			for ; yyj635 < yyl635; yyj635++ {
				yyv635 = append(yyv635, Binding{})
				yyh635.ElemContainerState(yyj635)
				if r.TryDecodeAsNil() {
					yyv635[yyj635] = Binding{}
				} else {
					yyv637 := &yyv635[yyj635]
					yyv637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj635 := 0
		for ; !r.CheckBreak(); yyj635++ {

			if yyj635 >= len(yyv635) {
				yyv635 = append(yyv635, Binding{}) // var yyz635 Binding
				yyc635 = true
			}
			yyh635.ElemContainerState(yyj635)
			if yyj635 < len(yyv635) {
				if r.TryDecodeAsNil() {
					yyv635[yyj635] = Binding{}
				} else {
					yyv638 := &yyv635[yyj635]
					yyv638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj635 < len(yyv635) {
			yyv635 = yyv635[:yyj635]
			yyc635 = true
		} else if yyj635 == 0 && yyv635 == nil {
			yyv635 = []Binding{}
			yyc635 = true
		}
	}
	yyh635.End()
	if yyc635 {
		*v = yyv635
	}
}

func (x codecSelfer1234) encSliceBindingCondition(v []BindingCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy640 := &yyv639
		yy640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBindingCondition(v *[]BindingCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv641 := *v
	yyh641, yyl641 := z.DecSliceHelperStart()
	var yyc641 bool
	if yyl641 == 0 {
		if yyv641 == nil {
			yyv641 = []BindingCondition{}
			yyc641 = true
		} else if len(yyv641) != 0 {
			yyv641 = yyv641[:0]
			yyc641 = true
		}
	} else if yyl641 > 0 {
		var yyrr641, yyrl641 int
		var yyrt641 bool
		if yyl641 > cap(yyv641) {

			yyrg641 := len(yyv641) > 0
			yyv2641 := yyv641
			yyrl641, yyrt641 = z.DecInferLen(yyl641, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt641 {
				if yyrl641 <= cap(yyv641) {
					yyv641 = yyv641[:yyrl641]
				} else {
					yyv641 = make([]BindingCondition, yyrl641)
				}
			} else {
				yyv641 = make([]BindingCondition, yyrl641)
			}
			yyc641 = true
			yyrr641 = len(yyv641)
			if yyrg641 {
				copy(yyv641, yyv2641)
			}
		} else if yyl641 != len(yyv641) {
			yyv641 = yyv641[:yyl641]
			yyc641 = true
		}
		yyj641 := 0
		for ; yyj641 < yyrr641; yyj641++ {
			yyh641.ElemContainerState(yyj641)
			if r.TryDecodeAsNil() {
				yyv641[yyj641] = BindingCondition{}
			} else {
				yyv642 := &yyv641[yyj641]
				yyv642.CodecDecodeSelf(d)
			}

		}
		if yyrt641 {
			for ; yyj641 < yyl641; yyj641++ {
				yyv641 = append(yyv641, BindingCondition{})
				yyh641.ElemContainerState(yyj641)
				if r.TryDecodeAsNil() {
					yyv641[yyj641] = BindingCondition{}
				} else {
					yyv643 := &yyv641[yyj641]
					yyv643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj641 := 0
		for ; !r.CheckBreak(); yyj641++ {

			if yyj641 >= len(yyv641) {
				yyv641 = append(yyv641, BindingCondition{}) // var yyz641 BindingCondition
				yyc641 = true
			}
			yyh641.ElemContainerState(yyj641)
			if yyj641 < len(yyv641) {
				if r.TryDecodeAsNil() {
					yyv641[yyj641] = BindingCondition{}
				} else {
					yyv644 := &yyv641[yyj641]
					yyv644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj641 < len(yyv641) {
			yyv641 = yyv641[:yyj641]
			yyc641 = true
		} else if yyj641 == 0 && yyv641 == nil {
			yyv641 = []BindingCondition{}
			yyc641 = true
		}
	}
	yyh641.End()
	if yyc641 {
		*v = yyv641
	}
}
